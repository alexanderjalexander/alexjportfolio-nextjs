"use server";

import { initServerApp } from "@/src/auth/firebaseServer";
import { auth } from "firebase-admin";
import { cookies } from "next/headers";
import { z } from "zod";

initServerApp();

/**
 * Verifies a user's id token and session cookie, and ensures that the person
 * requesting resources is in fact, that person and not someone else.
 *
 * @returns { bool }
 *
 * @param idToken
 */
export async function verifyUserIdToken(idToken: string | undefined) {
  if (idToken === undefined) {
    return false;
  } else {
    try {
      const decodedIdToken = await auth().verifyIdToken(idToken);
      const session = (await cookies()).get("alexjportfolio_session");

      if (session !== undefined && session.value !== "") {
        const decodedSessionCookie = await auth().verifySessionCookie(
          session.value,
        );
        return decodedSessionCookie.uid === decodedIdToken.uid;
      } else {
        return false;
      }
    } catch (e) {
      return false;
    }
  }
}

/**
 * Login Server Action.
 * Attaches a 30-day duration authentication cookie to the user's browser which
 * contains the idToken generated by the person in question.
 *
 *
 * @param idToken
 */
export async function loginAction(idToken: string) {
  try {
    await auth().verifyIdToken(idToken);
    const expiresIn = 60 * 60 * 24 * 30;
    const options = {
      name: "alexjportfolio_session",
      value: await auth().createSessionCookie(idToken, { expiresIn }),
      sameSite: true,
      maxAge: expiresIn,
      httpOnly: true,
      secure: true,
    };

    (await cookies()).set(options);
    return { status: 200 };
  } catch (e) {
    return { status: 400, error: e };
  }
}

/**
 * Logs out the user in question.
 */
export async function logoutAction() {
  const options = {
    name: "alexjportfolio_session",
    value: "",
    maxAge: -1,
  };

  (await cookies()).set(options);
  return { status: 200 };
}

/**
 * Gets the display name of a user given their ID
 *
 * @param userId the user's Firebase ID
 * @returns the name, or undefined
 */
export async function getUserDisplayName(
  userId: string,
): Promise<string | undefined> {
  try {
    const user = await auth().getUser(userId);
    return user.displayName;
  } catch (e) {
    console.log(e);
  }
}
